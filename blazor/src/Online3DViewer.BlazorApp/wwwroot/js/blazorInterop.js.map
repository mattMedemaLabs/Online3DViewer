{
  "version": 3,
  "sources": ["blazorInterop.ts"],
  "sourcesContent": ["type EngineModule = typeof import('../lib/o3dv/o3dv.module.js');\r\n\r\ntype EmbeddedViewer = InstanceType<EngineModule['EmbeddedViewer']>;\r\n\r\ninterface ViewerRegistryEntry {\r\n    container: HTMLElement;\r\n    viewer: EmbeddedViewer;\r\n}\r\n\r\nexport interface ViewerHandle {\r\n    id: number;\r\n}\r\n\r\nexport interface ViewerCreateOptions {\r\n    initialModelUrls?: string[];\r\n    theme?: string;\r\n    fixedCanvasSize?: { width: number; height: number } | null;\r\n}\r\n\r\ninterface FileStreamDescriptor {\r\n    name: string;\r\n    stream: {\r\n        arrayBuffer: () => Promise<ArrayBuffer>;\r\n        dispose?: () => void;\r\n    };\r\n}\r\n\r\nconst viewerRegistry = new Map<number, ViewerRegistryEntry>();\r\nlet viewerIdSeed = 1;\r\nlet enginePromise: Promise<EngineModule> | null = null;\r\n\r\nasync function loadEngine(): Promise<EngineModule> {\r\n    if (!enginePromise) {\r\n        enginePromise = import('../lib/o3dv/o3dv.module.js');\r\n    }\r\n    return enginePromise;\r\n}\r\n\r\nfunction ensureContainer(canvasId: string): HTMLElement {\r\n    const element = document.getElementById(canvasId);\r\n    if (!(element instanceof HTMLElement)) {\r\n        throw new Error(`Viewer container '${canvasId}' was not found or is not an element.`);\r\n    }\r\n    element.innerHTML = '';\r\n    element.classList.add('ov-viewer-host');\r\n    return element;\r\n}\r\n\r\nfunction applyTheme(element: HTMLElement, theme?: string): void {\r\n    element.dataset['ovTheme'] = theme ?? 'dark';\r\n    element.classList.toggle('ov-theme-dark', !theme || theme === 'dark');\r\n    element.classList.toggle('ov-theme-light', theme === 'light');\r\n}\r\n\r\nfunction applyFixedSize(element: HTMLElement, size?: { width: number; height: number } | null): void {\r\n    if (size) {\r\n        element.style.width = `${size.width}px`;\r\n        element.style.height = `${size.height}px`;\r\n    } else {\r\n        element.style.removeProperty('width');\r\n        element.style.removeProperty('height');\r\n    }\r\n}\r\n\r\nfunction getViewerFromHandle(handle: ViewerHandle): ViewerRegistryEntry {\r\n    const entry = viewerRegistry.get(handle.id);\r\n    if (!entry) {\r\n        throw new Error(`Viewer handle ${handle.id} is not registered.`);\r\n    }\r\n    return entry;\r\n}\r\n\r\nexport async function createViewer(canvasId: string, options: ViewerCreateOptions = {}): Promise<ViewerHandle> {\r\n    const engine = await loadEngine();\r\n    const container = ensureContainer(canvasId);\r\n    applyTheme(container, options.theme);\r\n    applyFixedSize(container, options.fixedCanvasSize ?? null);\r\n\r\n    const viewer = new engine.EmbeddedViewer(container, {});\r\n\r\n    const handle: ViewerHandle = { id: viewerIdSeed++ };\r\n    viewerRegistry.set(handle.id, { container, viewer });\r\n\r\n    if (options.initialModelUrls && options.initialModelUrls.length > 0) {\r\n        viewer.LoadModelFromUrlList(options.initialModelUrls);\r\n    }\r\n\r\n    return handle;\r\n}\r\n\r\nexport async function loadUrls(handle: ViewerHandle, urls: string[]): Promise<void> {\r\n    if (!urls || urls.length === 0) {\r\n        return;\r\n    }\r\n\r\n    await loadEngine();\r\n    const { viewer } = getViewerFromHandle(handle);\r\n    viewer.LoadModelFromUrlList(urls);\r\n}\r\n\r\nexport async function loadFiles(handle: ViewerHandle, fileDescriptors: FileStreamDescriptor[]): Promise<void> {\r\n    if (!fileDescriptors || fileDescriptors.length === 0) {\r\n        return;\r\n    }\r\n\r\n    await loadEngine();\r\n    const { viewer } = getViewerFromHandle(handle);\r\n\r\n    const files: File[] = [];\r\n    for (const descriptor of fileDescriptors) {\r\n        const buffer = await descriptor.stream.arrayBuffer();\r\n        files.push(new File([buffer], descriptor.name));\r\n        descriptor.stream.dispose?.();\r\n    }\r\n\r\n    viewer.LoadModelFromFileList(files);\r\n}\r\n\r\nexport async function disposeViewer(handle: ViewerHandle): Promise<void> {\r\n    const entry = viewerRegistry.get(handle.id);\r\n    if (!entry) {\r\n        return;\r\n    }\r\n\r\n    viewerRegistry.delete(handle.id);\r\n    entry.container.innerHTML = '';\r\n}\r\n"],
  "mappings": ";AA2BA,IAAM,iBAAiB,oBAAI,IAAiC;AAC5D,IAAI,eAAe;AACnB,IAAI,gBAA8C;AAElD,eAAe,aAAoC;AAC/C,MAAI,CAAC,eAAe;AAChB,oBAAgB,OAAO,4BAA4B;AAAA,EACvD;AACA,SAAO;AACX;AAEA,SAAS,gBAAgB,UAA+B;AACpD,QAAM,UAAU,SAAS,eAAe,QAAQ;AAChD,MAAI,EAAE,mBAAmB,cAAc;AACnC,UAAM,IAAI,MAAM,qBAAqB,QAAQ,uCAAuC;AAAA,EACxF;AACA,UAAQ,YAAY;AACpB,UAAQ,UAAU,IAAI,gBAAgB;AACtC,SAAO;AACX;AAEA,SAAS,WAAW,SAAsB,OAAsB;AAC5D,UAAQ,QAAQ,SAAS,IAAI,SAAS;AACtC,UAAQ,UAAU,OAAO,iBAAiB,CAAC,SAAS,UAAU,MAAM;AACpE,UAAQ,UAAU,OAAO,kBAAkB,UAAU,OAAO;AAChE;AAEA,SAAS,eAAe,SAAsB,MAAuD;AACjG,MAAI,MAAM;AACN,YAAQ,MAAM,QAAQ,GAAG,KAAK,KAAK;AACnC,YAAQ,MAAM,SAAS,GAAG,KAAK,MAAM;AAAA,EACzC,OAAO;AACH,YAAQ,MAAM,eAAe,OAAO;AACpC,YAAQ,MAAM,eAAe,QAAQ;AAAA,EACzC;AACJ;AAEA,SAAS,oBAAoB,QAA2C;AACpE,QAAM,QAAQ,eAAe,IAAI,OAAO,EAAE;AAC1C,MAAI,CAAC,OAAO;AACR,UAAM,IAAI,MAAM,iBAAiB,OAAO,EAAE,qBAAqB;AAAA,EACnE;AACA,SAAO;AACX;AAEA,eAAsB,aAAa,UAAkB,UAA+B,CAAC,GAA0B;AAC3G,QAAM,SAAS,MAAM,WAAW;AAChC,QAAM,YAAY,gBAAgB,QAAQ;AAC1C,aAAW,WAAW,QAAQ,KAAK;AACnC,iBAAe,WAAW,QAAQ,mBAAmB,IAAI;AAEzD,QAAM,SAAS,IAAI,OAAO,eAAe,WAAW,CAAC,CAAC;AAEtD,QAAM,SAAuB,EAAE,IAAI,eAAe;AAClD,iBAAe,IAAI,OAAO,IAAI,EAAE,WAAW,OAAO,CAAC;AAEnD,MAAI,QAAQ,oBAAoB,QAAQ,iBAAiB,SAAS,GAAG;AACjE,WAAO,qBAAqB,QAAQ,gBAAgB;AAAA,EACxD;AAEA,SAAO;AACX;AAEA,eAAsB,SAAS,QAAsB,MAA+B;AAChF,MAAI,CAAC,QAAQ,KAAK,WAAW,GAAG;AAC5B;AAAA,EACJ;AAEA,QAAM,WAAW;AACjB,QAAM,EAAE,OAAO,IAAI,oBAAoB,MAAM;AAC7C,SAAO,qBAAqB,IAAI;AACpC;AAEA,eAAsB,UAAU,QAAsB,iBAAwD;AAC1G,MAAI,CAAC,mBAAmB,gBAAgB,WAAW,GAAG;AAClD;AAAA,EACJ;AAEA,QAAM,WAAW;AACjB,QAAM,EAAE,OAAO,IAAI,oBAAoB,MAAM;AAE7C,QAAM,QAAgB,CAAC;AACvB,aAAW,cAAc,iBAAiB;AACtC,UAAM,SAAS,MAAM,WAAW,OAAO,YAAY;AACnD,UAAM,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,WAAW,IAAI,CAAC;AAC9C,eAAW,OAAO,UAAU;AAAA,EAChC;AAEA,SAAO,sBAAsB,KAAK;AACtC;AAEA,eAAsB,cAAc,QAAqC;AACrE,QAAM,QAAQ,eAAe,IAAI,OAAO,EAAE;AAC1C,MAAI,CAAC,OAAO;AACR;AAAA,EACJ;AAEA,iBAAe,OAAO,OAAO,EAAE;AAC/B,QAAM,UAAU,YAAY;AAChC;",
  "names": []
}
